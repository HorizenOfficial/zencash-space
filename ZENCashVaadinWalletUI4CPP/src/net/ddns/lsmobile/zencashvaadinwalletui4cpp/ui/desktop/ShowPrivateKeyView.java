package net.ddns.lsmobile.zencashvaadinwalletui4cpp.ui.desktop;

import com.vaadin.jsclipboard.JSClipboard;
import com.vaadin.navigator.ViewChangeListener;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Notification;
import com.xdev.ui.XdevButton;
import com.xdev.ui.XdevGridLayout;
import com.xdev.ui.XdevLabel;
import com.xdev.ui.XdevView;

public class ShowPrivateKeyView extends XdevView {

	/**
	 * 
	 */
	public ShowPrivateKeyView(final boolean isZAddress,final String selectedAddress, final String privateKey) {
		super();
		this.initUI();
		
		this.labelSelectedAddress.setCaption((isZAddress ? "Z (Private)" : "T (Transparent)") + " address:");
		this.labelSelectedAddress.setValue(selectedAddress);
		this.labelPrivateKey.setValue(privateKey);
		
		final JSClipboard clipboard = new JSClipboard();
		clipboard.apply(this.buttonCopyToClipboard, this.labelPrivateKey);
		clipboard.addSuccessListener(new JSClipboard.SuccessListener() {

			@Override
			public void onSuccess() {
				Notification.show("The private key has been copied to the clipboard");
			}
		});
		clipboard.addErrorListener(new JSClipboard.ErrorListener() {

			@Override
			public void onError() {
				Notification.show("Copy to clipboard unsuccessful", Notification.Type.ERROR_MESSAGE);
			}
		});
	}
	

	@Override
	public void enter(final ViewChangeListener.ViewChangeEvent event) {
		super.enter(event);
		
		this.buttonCopyToClipboard.click();
	}


	/*
	 * WARNING: Do NOT edit!<br>The content of this method is always regenerated by
	 * the UI designer.
	 */
	// <generated-code name="initUI">
	private void initUI() {
		this.gridLayout = new XdevGridLayout();
		this.labelSelectedAddress = new XdevLabel();
		this.labelPrivateKey = new XdevLabel();
		this.buttonCopyToClipboard = new XdevButton();
	
		this.setCaption("Private key information");
		this.labelSelectedAddress.setCaption("Z (Private) or T (Transparent) address:");
		this.labelSelectedAddress.setValue("selected address");
		this.labelPrivateKey.setCaption("has private key:");
		this.labelPrivateKey.setValue("private key");
		this.buttonCopyToClipboard.setCaption("Copy to clipboard");
	
		this.gridLayout.setColumns(1);
		this.gridLayout.setRows(4);
		this.labelSelectedAddress.setSizeUndefined();
		this.gridLayout.addComponent(this.labelSelectedAddress, 0, 0);
		this.labelPrivateKey.setSizeUndefined();
		this.gridLayout.addComponent(this.labelPrivateKey, 0, 1);
		this.buttonCopyToClipboard.setSizeUndefined();
		this.gridLayout.addComponent(this.buttonCopyToClipboard, 0, 2);
		this.gridLayout.setComponentAlignment(this.buttonCopyToClipboard, Alignment.TOP_RIGHT);
		this.gridLayout.setColumnExpandRatio(0, 10.0F);
		final CustomComponent gridLayout_vSpacer = new CustomComponent();
		gridLayout_vSpacer.setSizeFull();
		this.gridLayout.addComponent(gridLayout_vSpacer, 0, 3, 0, 3);
		this.gridLayout.setRowExpandRatio(3, 1.0F);
		this.gridLayout.setSizeFull();
		this.setContent(this.gridLayout);
		this.setWidth(640, Unit.PIXELS);
		this.setHeight(270, Unit.PIXELS);
	} // </generated-code>

	// <generated-code name="variables">
	private XdevLabel labelSelectedAddress, labelPrivateKey;
	private XdevButton buttonCopyToClipboard;
	private XdevGridLayout gridLayout;
	// </generated-code>

}
