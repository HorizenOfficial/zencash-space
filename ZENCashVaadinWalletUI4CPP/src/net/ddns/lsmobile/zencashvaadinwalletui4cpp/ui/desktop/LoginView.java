
package net.ddns.lsmobile.zencashvaadinwalletui4cpp.ui.desktop;

import com.vaadin.event.ShortcutAction;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Notification;
import com.xdev.res.ApplicationResource;
import com.xdev.security.authentication.CredentialsUsernamePassword;
import com.xdev.security.authentication.ui.Authentication;
import com.xdev.ui.XdevButton;
import com.xdev.ui.XdevGridLayout;
import com.xdev.ui.XdevPanel;
import com.xdev.ui.XdevPasswordField;
import com.xdev.ui.XdevTextField;
import com.xdev.ui.XdevView;
import com.xdev.ui.navigation.Navigation;

import net.ddns.lsmobile.zencashvaadinwalletui4cpp.business.AuthenticationProvider;
import net.ddns.lsmobile.zencashvaadinwalletui4cpp.business.IConfig;
import net.ddns.lsmobile.zencashvaadinwalletui4cpp.business.ZenNode;
import net.ddns.lsmobile.zencashvaadinwalletui4cpp.ui.Servlet;

public class LoginView extends XdevView implements com.xdev.security.authentication.ui.LoginView, IConfig {

	/**
	 * 
	 */
	public LoginView() {
		super();
		this.initUI();
	}

	@Override
	public String getPassword() {
		return this.txtPassword.getValue();
	}

	@Override
	public String getUsername() {
		return this.txtUsername.getValue();
	}

	/**
	 * Event handler delegate method for the {@link XdevButton}
	 * {@link #cmdLogin}.
	 *
	 * @see Button.ClickListener#buttonClick(Button.ClickEvent)
	 * @eventHandlerDelegate
	 */
	private void cmdLogin_buttonClick(final Button.ClickEvent event) {
		final ZenNode zenNode = ((Servlet) Servlet.getCurrent()).zenNode;
		while (!zenNode.connected) {
			try {
				Thread.sleep(3000);
			} catch (final InterruptedException e) {
			}
			log.error("The node is not connected yet.");
		}
		final CredentialsUsernamePassword credentials = CredentialsUsernamePassword.New(getUsername(), getPassword());
		final AuthenticationProvider authenticatorProvider = AuthenticationProvider.getInstance();
		if (!Authentication.tryLogin(credentials, authenticatorProvider)) {
			Notification.show("Invalid username/password");
		}
	}

	/**
	 * Event handler delegate method for the {@link XdevButton} {@link #linkSign}.
	 *
	 * @see Button.ClickListener#buttonClick(Button.ClickEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void linkSign_buttonClick(final Button.ClickEvent event) {
		Navigation.to("signing").navigate();
	}

	/*
	 * WARNING: Do NOT edit!<br>The content of this method is always regenerated by
	 * the UI designer.
	 */
	// <generated-code name="initUI">
	private void initUI() {
		this.gridLayout = new XdevGridLayout();
		this.panel = new XdevPanel();
		this.gridLayout2 = new XdevGridLayout();
		this.txtUsername = new XdevTextField();
		this.txtPassword = new XdevPasswordField();
		this.linkSign = new XdevButton();
		this.cmdLogin = new XdevButton();
	
		this.setIcon(new ApplicationResource(this.getClass(), "WebContent/WEB-INF/resources/images/zenicon128.png"));
		this.panel.setCaption("Login");
		this.panel.setTabIndex(0);
		this.txtUsername.setCaption("Username");
		this.txtPassword.setCaption("Password");
		this.linkSign.setCaption("Sign");
		this.linkSign.setStyleName("link");
		this.cmdLogin.setCaption("Login");
		this.cmdLogin.setStyleName("friendly");
		this.cmdLogin.setClickShortcut(ShortcutAction.KeyCode.ENTER);
	
		this.gridLayout2.setColumns(2);
		this.gridLayout2.setRows(4);
		this.txtUsername.setWidth(100, Unit.PERCENTAGE);
		this.txtUsername.setHeight(-1, Unit.PIXELS);
		this.gridLayout2.addComponent(this.txtUsername, 0, 0, 1, 0);
		this.txtPassword.setWidth(100, Unit.PERCENTAGE);
		this.txtPassword.setHeight(-1, Unit.PIXELS);
		this.gridLayout2.addComponent(this.txtPassword, 0, 1, 1, 1);
		this.linkSign.setSizeUndefined();
		this.gridLayout2.addComponent(this.linkSign, 0, 2);
		this.cmdLogin.setSizeUndefined();
		this.gridLayout2.addComponent(this.cmdLogin, 1, 2);
		this.gridLayout2.setComponentAlignment(this.cmdLogin, Alignment.MIDDLE_RIGHT);
		this.gridLayout2.setColumnExpandRatio(0, 10.0F);
		this.gridLayout2.setColumnExpandRatio(1, 10.0F);
		final CustomComponent gridLayout2_vSpacer = new CustomComponent();
		gridLayout2_vSpacer.setSizeFull();
		this.gridLayout2.addComponent(gridLayout2_vSpacer, 0, 3, 1, 3);
		this.gridLayout2.setRowExpandRatio(3, 1.0F);
		this.gridLayout2.setSizeFull();
		this.panel.setContent(this.gridLayout2);
		this.gridLayout.setColumns(1);
		this.gridLayout.setRows(1);
		this.panel.setSizeUndefined();
		this.gridLayout.addComponent(this.panel, 0, 0);
		this.gridLayout.setComponentAlignment(this.panel, Alignment.MIDDLE_CENTER);
		this.gridLayout.setColumnExpandRatio(0, 10.0F);
		this.gridLayout.setRowExpandRatio(0, 10.0F);
		this.gridLayout.setSizeFull();
		this.setContent(this.gridLayout);
		this.setSizeFull();
	
		this.linkSign.addClickListener(event -> this.linkSign_buttonClick(event));
		this.cmdLogin.addClickListener(event -> this.cmdLogin_buttonClick(event));
	} // </generated-code>

	// <generated-code name="variables">
	private XdevButton cmdLogin, linkSign;
	private XdevPasswordField txtPassword;
	private XdevPanel panel;
	private XdevGridLayout gridLayout, gridLayout2;
	private XdevTextField txtUsername;
	// </generated-code>

}
